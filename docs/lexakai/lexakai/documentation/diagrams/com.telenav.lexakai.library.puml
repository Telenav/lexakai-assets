@startuml

    !include ../../../../../../lexakai/documentation/lexakai/lexakai.theme

    title "com.telenav.lexakai.library"

    class Annotations
    {
        --
        +Set<AnnotationExpr> annotationsOfType(NodeWithAnnotations<?> type, Class<? extends Annotation> annotationType)
        +boolean booleanValue(AnnotationExpr, String member, boolean defaultValue)
        +Set<String> classNames(AnnotationExpr, String member)
        +Set<String> classNames(AnnotationExpr)
        +Expression expression(AnnotationExpr, String member)
        +String stringValue(AnnotationExpr, String member)
        +String stringValue(AnnotationExpr)
        --(collection)--
        +Set<String> stringValues(AnnotationExpr, String member)
        +Expression value(AnnotationExpr, String memberName)
        --(naming)--
        +String className(AnnotationExpr, String member)
    }

    class Associations
    {
        --
        +String cardinalityGuess(Type)
        --(collection)--
        +List<UmlAssociation> explicitRelations(TypeDeclaration<?>, String diagramName)
    }

    class Diagrams
    {
        --
        +AnnotationExpr diagramAnnotation(TypeDeclaration<?>, String diagramName)
        +Set<String> diagrams(TypeDeclaration<?>, boolean includePackageDiagram)
    }

    class Fields
    {
        --
        +UmlAssociation.AssociationType associationType(FieldDeclaration)
        --(filtering)--
        +boolean isExcluded(FieldDeclaration)
    }

    class Members
    {
        --
        +String associationString(NodeWithAnnotations<?> member, String key)
        +String associationString(NodeWithAnnotations<?> member, Class<? extends Annotation>, String key)
    }

    class Methods
    {
        --
        +UmlAssociation.AssociationType associationType(MethodDeclaration)
        +Set<String> explicitGroups(MethodDeclaration)
        --(filtering)--
        +boolean isExcluded(ConstructorDeclaration)
        +boolean isExcluded(MethodDeclaration)
    }

    class Names
    {
        --
        +String typeParameters(TypeDeclaration<?>)
        +String withoutQualification(String qualifiedClassName)
        +String withoutTypeParameters(String typeName)
        --(naming)--
        +String name(ClassExpr expression, Qualification, TypeParameters)
        +String name(TypeDeclaration<?>, Qualification, TypeParameters)
        +String name(Type, Qualification, TypeParameters)
        +String packageName(String qualifiedName)
        +String simpleName(NodeWithSimpleName<?>)
        +String simpleName(Type node)
    }

    enum Names.Qualification
    {
        QUALIFIED
        UNQUALIFIED
    }

    enum Names.TypeParameters
    {
        WITHOUT_TYPE_PARAMETERS
        WITH_TYPE_PARAMETERS
    }

    class Types
    {
        --
        +String type(TypeDeclaration<?>)
        +String typeDeclarationModifiers(TypeDeclaration<?>)
        --(checks)--
        +boolean hasTypeParameters(Type)
        +boolean isExcludedSuperType(TypeDeclaration<?>, LexakaiClassDiagram, String supertype)
        +boolean isInterface(TypeDeclaration<?>)
        +boolean isNotPublicApi(TypeDeclaration<?>)
        +boolean isObject(Type)
        +boolean isReference(Type)
        --(collection)--
        +List<Type> typeParameters(Type)
    }

@enduml

